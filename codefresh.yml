version: '1.0'

steps:

    sakai_clone:
      type: git-clone
      title: Sakai Clone Repository
      description: Clone the specific sakai repo you want to test
      repo: https://github.com/${{REPO_OWNER}}/${{REPO_NAME}}.git
      revision: ${{REPO_REVISION}}
      when:
       condition:
        all:
         notBinaryRelease: 'includes("${{BINARY_RELEASE}}", "$") == true'
         notSakaiExperimental: 'includes("${{SAKAI_BASE_TAG}}", "$") == true'
      
    binary_release:
      title: Download Sakai Binary Release
      description: Download some binary Sakai release to test it without build from source
      image: arkban/alpine-aws-wget:latest
      working_directory: ${{main_clone}}
      commands:
        - rm -rf ./tomcat/target
        - mkdir -p ./tomcat/target
        - mkdir -p ./binaries
        - test ! -f ./binaries/sakai-bin-${{BINARY_RELEASE}}.tar.gz && wget -O ./binaries/sakai-bin-${{BINARY_RELEASE}}.tar.gz http://source.sakaiproject.org/release/${{BINARY_RELEASE}}/artifacts/sakai-bin-${{BINARY_RELEASE}}.tar.gz  --no-check-certificate ; echo "Sakai Binary Release ${{BINARY_RELEASE}} already download."
        - tar xzvC ./tomcat/target -f ./binaries/sakai-bin-${{BINARY_RELEASE}}.tar.gz
      when:
       condition:
        all:
         useBinaryRelease: 'includes("${{BINARY_RELEASE}}", "$") == false'
         notDemoBinaryRelease: '"${{BINARY_RELEASE}}" != "demo"'

    binary_demo_release:
      title: Download Demo Binary Release
      description: Download some binary demo release to test it without build from source
      image: arkban/alpine-aws-wget:latest
      working_directory: ${{main_clone}}
      commands:
        - rm -rf ./tomcat/target
        - mkdir -p ./tomcat/target/webapps
        - mkdir -p ./tomcat/target/components
        - mkdir -p ./tomcat/target/lib
        - wget -O ./tomcat/target/webapps/portal.war https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/sample.war --no-check-certificate
      when:
       condition:
        all:
         useBinaryRelease: '"${{BINARY_RELEASE}}" == "demo"'
         notSakaiExperimental: 'includes("${{SAKAI_BASE_TAG}}", "$") == true'
    
    mvn_enc:
      title: Encrypt Maven Settings For Oracle Download
      description: Make necessary steps to be able to download jdbc driver from oracle maven repository
      image: maven:3.2.3-jdk-8
      working_directory: ${{main_clone}}
      environment:
       - MASTER_PASSWORD=${{MASTER_PASSWORD}}
       - ORACLE_USER=${{ORACLE_USER}}
       - ORACLE_PASS=${{ORACLE_PASS}}
      commands:
       - ./maven/mvnsecurity.sh
      when:
       condition:
        all:
         existsMasterPassword: 'includes("${{MASTER_PASSWORD}}", "$") == false'
         oracleDatabase: '"${{SAKAI_DB_DRIVER}}" == "oracle" || "${{SAKAI_DB_DRIVER}}" == "all"'
         notSakaiExperimental: 'includes("${{SAKAI_BASE_TAG}}", "$") == true'

    build_wait:
      title: Build Wait For Database Code
      description: Create a small java program that test database availability
      image: maven:latest
      working_directory: ${{main_clone}}
      environment:
       - MAVEN_OPTS=-Dmaven.repo.local=/codefresh/volume/.m2/repository
      commands:
       - cp ./maven/settings.xml /root/.m2/settings.xml
       - cp ./maven/settings-security.xml /root/.m2/settings-security.xml
       - mvn -f wait -P${{SAKAI_DB_DRIVER}} clean install
       - mkdir -p tomcat/target/lib/
       - cp wait/target/*.jar tomcat/target/lib/
      when:
       condition:
        all:
         notSakaiExperimental: 'includes("${{SAKAI_BASE_TAG}}", "$") == true'
	   
    build_code:
      title: Build Sakai Code Skiping Tests
      description: Classic Sakai build from code step without test execution
      image: maven:latest
      working_directory: ${{main_clone}}
      environment:
       - MAVEN_OPTS=-Dmaven.repo.local=/codefresh/volume/.m2/repository -Dmaven.tomcat.home=${{main_clone}}/tomcat/target
      commands:
       - cp ./maven/settings.xml /root/.m2/settings.xml
       - cp ./maven/settings-security.xml /root/.m2/settings-security.xml
       - rm -rf ./tomcat/target
       - mvn -f sakai -DskipTests=true -P${{SAKAI_DB_DRIVER}} clean install sakai:deploy
      when:
       condition:
        all:
         notBinaryRelease: 'includes("${{BINARY_RELEASE}}", "$") == true'
         notSakaiExperimental: 'includes("${{SAKAI_BASE_TAG}}", "$") == true'
       
    build_dockerfile:
      title: Build Dockerfile
      description: Create dockerfile to build Sakai image
      image: arkban/alpine-aws-wget:latest
      working_directory: ${{main_clone}}
      commands:
        - touch ./tomcat/sakai/local.properties
        - touch ./tomcat/sakai/sakai.properties
        - touch ./tomcat/sakai/placeholder.properties
        - echo 'org.quartz.jobStore.isClustered = true' > ./tomcat/sakai/sakai.quartz.properties
        - echo 'FROM ${{TOMCAT_IMAGE}}' > ./tomcat/Dockerfile
        - echo '' >> ./tomcat/Dockerfile
        - cat ./tomcat/dockerfile_base >> ./tomcat/Dockerfile
        - cat ./tomcat/dockerfile_sakai >> ./tomcat/Dockerfile
        - echo 'EXPOSE 8080' >> ./tomcat/Dockerfile
      when:
       condition:
        all:
         notSakaiExperimental: 'includes("${{SAKAI_BASE_TAG}}", "$") == true'

    build_experimental_dockerfile:
      title: Build Dockerfile For Experimental
      description: Create dockerfile to build Sakai image with experimental properties
      image: arkban/alpine-aws-wget:latest
      working_directory: ${{main_clone}}
      commands:
        - touch ./tomcat/sakai/local.properties
        - touch ./tomcat/sakai/sakai.properties
        - touch ./tomcat/sakai/placeholder.properties
        - echo 'org.quartz.jobStore.isClustered = true' > ./tomcat/sakai/sakai.quartz.properties
        - wget -O ./tomcat/${{PROPERTIES_FILE}} ${{EXPERIMENTAL_PROPS}} --no-check-certificate
        - echo 'FROM ${{SAKAI_BASE_TAG}}' > ./tomcat/Dockerfile
        - echo '' >> ./tomcat/Dockerfile
        - cat ./tomcat/dockerfile_sakai >> ./tomcat/Dockerfile
        - echo 'EXPOSE 8080' >> ./tomcat/Dockerfile
      when:
       condition:
        all:
         isSakaiExperimental: 'includes("${{SAKAI_BASE_TAG}}", "$") == false'

    build_database_image:
      title: Building Database Image For Oracle
      description: Build the database image in case you want to use Oracle
      type: build
      working_directory: ${{main_clone}}/oracle/
      dockerfile: ${{DB_VERSION}}
      image_name: ${{DB_IMAGE}}
      tag: ${{DB_VERSION}}
      metadata:
        set:
          - database: '${{DB_IMAGE}}'
          - version: '${{DB_VERSION}}'
      when:
       condition:
        all:
         noSkipOracleBuild: '"${{SKIP_ORACLE_BUILD}}" != "true"'
         oracleDatabase: '("${{SAKAI_DB_DRIVER}}" == "oracle" || "${{SAKAI_DB_DRIVER}}" == "all") && (includes("${{DB_VERSION}}","oracle") == true)'

    build_image:
      title: Building Docker Sakai Image
      description: Build docker image with sakai binary code ready to run
      type: build
      working_directory: ${{main_clone}}/tomcat/
      dockerfile: Dockerfile
      image_name: ${{REPO_OWNER}}/${{REPO_NAME}}
      tag: ${{SAKAI_TAG}}
      metadata:
        set:
          - repo: '${{REPO_OWNER}}/${{REPO_NAME}}'
          - revision: '${{REPO_REVISION}}'
          - tag: '${{SAKAI_TAG}}'
          - bin_release: '${{BINARY_RELEASE}}'
          - server: '${{TOMCAT_IMAGE}}'
          - base_image: '${{SAKAI_BASE_TAG}}'
          - experimental: '${{EXPERIMENTAL_PROPS}}'
          - properties: '${{PROPERTIES_FILE}}'
          - driver: '${{SAKAI_DB_DRIVER}}'
        
    launch_sakai_composition:
      title: Launch Sakai Server Composition
      description: Run Sakai composition
      type: launch-composition
      composition: docker-compose.yml
      composition_variables:
       - DATABASE_TYPE=${{SAKAI_DB_DRIVER}}
       - DATABASE_IMAGE=${{DB_IMAGE}}:${{DB_VERSION}}
       - SAKAI_IMAGE=${{REPO_OWNER}}/${{REPO_NAME}}:${{SAKAI_TAG}}
      environment_name: '${{CF_REPO_NAME}}_${{CF_BRANCH}}'
      entry_point: sakai
      when:
       condition:
        all:
         noSkipOracleBuild: '"${{SKIP_LAUNCH}}" != "true"'
   